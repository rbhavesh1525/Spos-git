/*Practical : Write a program to simulate CPU Scheduling Algorithms: SJF (Preemptive) Process AT BT P1 10 2 P2 0 10 P3 8 4 P4 5 5*/

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

class Process {
    String name;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;

    Process(String name, int arrivalTime, int burstTime) {
        this.name = name;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime;
    }
}

public class SJF_Preemptive_Scheduling {

    public static void main(String[] args) {
        // Define processes with given arrival and burst times
        List<Process> processes = new ArrayList<>();
        processes.add(new Process("P1", 10, 2));
        processes.add(new Process("P2", 0, 10));
        processes.add(new Process("P3", 8, 4));
        processes.add(new Process("P4", 5, 5));

        // Sort processes by arrival time for easy handling
        processes.sort(Comparator.comparingInt(p -> p.arrivalTime));

        // Priority queue to hold processes based on shortest remaining time
        PriorityQueue<Process> readyQueue = new PriorityQueue<>(Comparator.comparingInt(p -> p.remainingTime));

        int currentTime = 0;
        int completedProcesses = 0;
        int totalWaitingTime = 0;
        int totalTurnaroundTime = 0;
        
        while (completedProcesses < processes.size()) {
            // Add all processes that have arrived by current time to the ready queue
            for (Process p : processes) {
                if (p.arrivalTime <= currentTime && p.remainingTime > 0 && !readyQueue.contains(p)) {
                    readyQueue.add(p);
                }
            }

            // If the ready queue is empty, increment time to the next arrival time
            if (readyQueue.isEmpty()) {
                currentTime++;
                continue;
            }

            // Get the process with the shortest remaining time
            Process currentProcess = readyQueue.poll();

            // Process it for one unit of time (preemptive scheduling)
            currentProcess.remainingTime--;
            currentTime++;

            // If the process is completed, calculate completion time, turnaround time, and waiting time
            if (currentProcess.remainingTime == 0) {
                completedProcesses++;
                currentProcess.completionTime = currentTime;
                currentProcess.turnaroundTime = currentProcess.completionTime - currentProcess.arrivalTime;
                currentProcess.waitingTime = currentProcess.turnaroundTime - currentProcess.burstTime;

                // Add to total times for calculating averages later
                totalWaitingTime += currentProcess.waitingTime;
                totalTurnaroundTime += currentProcess.turnaroundTime;
            } else {
                // If the process is not finished, re-add it to the queue for further processing
                readyQueue.add(currentProcess);
            }
        }

        // Display results
        System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
        for (Process process : processes) {
            System.out.println(process.name + "\t" + process.arrivalTime + "\t" + process.burstTime + "\t" +
                    process.completionTime + "\t" + process.turnaroundTime + "\t" + process.waitingTime);
        }

        // Calculate and display average waiting time and turnaround time
        double averageWaitingTime = (double) totalWaitingTime / processes.size();
        double averageTurnaroundTime = (double) totalTurnaroundTime / processes.size();

        System.out.printf("Average Waiting Time: %.2f\n", averageWaitingTime);
        System.out.printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
    }
}
